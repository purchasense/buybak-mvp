import os, json
import sys
from llama_index.core.workflow import (Workflow)
from llama_parse import LlamaParse
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.readers.web import AgentQLWebReader
import pandas as pd
from typing import Optional
from typing import ClassVar
from typing import List
from pydantic import BaseModel
import json

class FSMCWorkflow(Workflow):

    fsmc_file = ""

    def __init__(self, fsmc_file, *args, **kwargs):

        self.fsmc_file = fsmc_file
        with open(self.fsmc_file, 'r') as file:
            self.state_machine = json.load(file)
        # TODO print(self.state_machine)

    def generate_prologue(self):
        print("\"\"\"")
        print("/////////////////////////////////////////////////////////////////////")
        print("//")
        print("//  Copyright (c) 2025 Sameer Kulkarni.")
        print("//  BuyBak - Proprietary and Confidencial. All rights reserved.")
        print("//")
        print("//  author - Sameer Kulkarni, sameer@buybak.io, sameerk1973@gmail.com")
        print(f"//  Input File   - {self.state_machine['fsmc']['name']}.sm")
        print("//")
        print("/////////////////////////////////////////////////////////////////////")
        print("                       ")
        print("This file is AUTO-GENERATED. PLEASE DO NOT EDIT THIS FILE")
        print("\"\"\"")

    def generate_imports(self):
        print("")
        print(f'from buybakworkflow.{self.state_machine["fsmc"]["name"]}Context import *')
        for i in self.state_machine['fsmc']['headers']: 
            print(i)
        print("")

    def generate_dictionary(self):
        print("")
        for base_model in self.state_machine['fsmc']['dictionary']: 
            print(f'class {base_model["class"]}(BaseModel):')
            for attrs in  base_model['attributes']:
                keys = list(attrs.keys())
                print(f'    {keys[0]}:   {attrs[keys[0]]} = Field({attrs["field"]})')
            print("")
        print("")

    def generate_stimulus_events(self):
        print("")
        for event_model in self.state_machine['fsmc']['stimuli']: 
            print(f'class {event_model["method"]}({event_model["args"]}):')
            for attrs in  event_model['body']:
                keys = list(attrs.keys())
                print(f'    {keys[0]}:   {attrs[keys[0]]}')
            print("")
        print("")

    def generate_workflow_member_vars(self):
        print("")
        print(f'class {self.state_machine["fsmc"]["name"]}(Workflow):')
        for attrs in  self.state_machine['fsmc']['membervars']:
            print(f'    {attrs["name"]}:   {attrs["type"]} = Field({attrs["field"]})')
        print("")

    def generate_additional_args(self, args: str, steps: []) -> tuple[str, str]:
        evs = ""
        count = len(steps["stimuli"])
        index = 0
        for stimuli in steps["stimuli"]:
            evs = evs + f' {stimuli["stimulus"]}'
            index = index + 1
            if index < count:
                evs = evs + " | "
        args = args + ", ev: " + evs    

        emits = ""
        index = 0
        count = len(steps["emits"])
        for events in steps["emits"]:
            emits = emits + f' {events["event"]}'
            index = index + 1
            if index < count:
                emits = emits + " | "
        return args, emits
            
    def generate_workflow_steps(self):
        for steps in self.state_machine["fsmc"]["steps"]:
            delimiter = ","
            args = delimiter.join(steps["args"])
            if steps["state"] == "__init__":
                
                print(f'    def {steps["state"]}({args}):')
                print(f'        print(\"Inside {steps["state"]}\")')
                print("")
            else:
                args = args + f', fsmc: {self.state_machine["fsmc"]["name"]}Context '
                [args, emits] = self.generate_additional_args(args, steps)

                print("    @step")
                print(f'    async def {steps["state"]}({args}) -> {emits}:')
                print(f'        print(\"Inside {steps["state"]}\")')
                print("")
        print("")

async def main():
    if len(sys.argv) >= 2:
        fsmc = FSMCWorkflow(fsmc_file=sys.argv[1], timeout=30, verbose=True)
        fsmc.generate_prologue()
        fsmc.generate_imports()
        fsmc.generate_dictionary()
        fsmc.generate_stimulus_events()
        fsmc.generate_workflow_member_vars()
        fsmc.generate_workflow_steps()
    else:
        print("Please provide <FSMC.sm>")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())


