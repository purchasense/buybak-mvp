"""
/////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2025 Sameer Kulkarni.
//  BuyBak - Proprietary and Confidencial. All rights reserved.
//
//  author - Sameer Kulkarni, sameer@buybak.io, sameerk1973@gmail.com
//  Input File   - MyWorkflow.sm
//
/////////////////////////////////////////////////////////////////////
                       
This file is AUTO-GENERATED. PLEASE DO NOT EDIT THIS FILE
                       
"""

from buybakworkflow.MyWorkflowContext import *
from llama_index.llms.openai import OpenAI
from buybakworkflow.events import *
from pathlib import Path
from typing import List
from llama_index.core.workflow import Event
from buybakworkflow.schemas import *
from llama_index.core.workflow import ( StartEvent, StopEvent, Workflow, step, Event, Context)
import click
import asyncio
import json
import random
import shutil
import string
import uuid
import json
import asyncio
import inspect


class Booking(BaseModel):
    name:   str = Field(..., description="Name")
    userid:   str = Field(..., description="Unique UserID")
    depart_airport_code:   str = Field(..., description="Departure Airport Code")
    arrival_airport_code:   str = Field(..., description="Arrival Airport Code")
    departure_date:   str = Field(..., description="Depart Date")
    return_date:   str = Field(..., description="Return Date")
    num_adults:   str = Field(..., description="Number of adults")
    num_children:   str = Field(..., description="Number of Children")

class WorkflowStreamingEvent(BaseModel):
    event_type:   Literal["agent", "input"] = Field(..., description="Type of the event")
    event_state:   str = Field(..., description="Finite State")
    event_stimuli:   str = Field(..., description="Stimulus applied to the state transition")
    outline:   str = Field(..., description="Outline")
    message:   str = Field(..., description="Message")

class ResearchTopic(BaseModel):
    query:   str = Field(..., example="example query")



class FirstEvent(Event):
    first_output:   str

class SecondEvent(Event):
    second_output:   str
    response:   str

class ProgressEvent(Event):
    msg:   str

class SetAIEvent(Event):
    result:   str



class MyWorkflow(Workflow):
    sameer_here:   str = Field(..., description="placeholder")
    fsmc:   MyWorkflowContext = Field(..., description="Action Functions")

    def __init__(self, fsmc: MyWorkflowContext, *args, **kwargs):
        print("Inside __init__")
        super().__init__(*args, **kwargs)
        # initialize the Future
        self.fsmc = fsmc
        self.user_input_future = asyncio.Future()
        
    async def run(self, *args, **kwargs):
            self.loop = asyncio.get_running_loop() # store the event loop
            return await super().run(*args, **kwargs)
 
    async def reset_user_input_future(self):
        self.user_input_future = self.loop.create_future()
 
    @step
    async def step_one(self,ctx: Context, ev:  StartEvent) ->  FirstEvent:
        print("Inside step_one")
        await self.fsmc.generate_stream_event(ctx, ev, 'agent', 'StartEvent', 'step_one', 'One Message')
        await self.fsmc.one_action_1(ctx, ev, 'call action_1')
        await self.fsmc.suneels_action_function(ctx, ev, 'I am Suneel!')
        
        return FirstEvent(first_output="First step complete.")


    @step
    async def step_two(self,ctx: Context, ev:  FirstEvent) ->  SecondEvent:
        print("Inside step_two")
        await self.fsmc.generate_stream_event(ctx, ev, 'agent', 'FirstEvent', 'step_two', 'Two Message')
        await self.fsmc.two_action_1(ctx, ev, 'call action_1')
        
        return SecondEvent(second_output="First step complete.",response="step_two completed")


    @step
    async def step_three(self,ctx: Context, ev:  SecondEvent) ->  GetUserEvent:
        print("Inside step_three")
        await self.fsmc.generate_stream_event(ctx, ev, 'input', 'SecondEvent', 'step_three', 'Two Message')
        await self.fsmc.two_action_1(ctx, ev, 'call action_2')
        
        return GetUserEvent(msg="Look for input from user")


    @step
    async def step_four(self,ctx: Context, ev:  GetUserEvent) ->  SetAIEvent |  StopEvent:
        print("Inside step_four")
        await self.fsmc.generate_stream_event(ctx, ev, 'agent', 'GetUserEvent', 'step_four', 'Three Message')
        ret_val, user_response = await self.fsmc.conditional_three_action_1(ctx, ev, self.user_input_future, 'call action_3')
        await self.reset_user_input_future()
        
        if ret_val == True:
            return SetAIEvent(result=user_response)
        else:
            return StopEvent(result=user_response)


    @step
    async def step_five(self,ctx: Context, ev:  SetAIEvent) ->  GetUserEvent |  StopEvent:
        print("Inside step_five")
        await self.fsmc.generate_stream_event(ctx, ev, 'agent', 'SetAIEvent', 'step_five', 'Four Message')
        ret_val, user_response = await self.fsmc.conditional_four_action_1(ctx, ev, self.user_input_future, 'call action_4')
        await self.reset_user_input_future()
        
        if ret_val == True:
            return GetUserEvent(result=user_response)
        else:
            return StopEvent(result=user_response)



async def run_workflow(first_input: str):
    fsmc = MyWorkflowContext()
    w = MyWorkflow(fsmc=fsmc, timeout=30, verbose=True)
    result = await w.run(first_input=first_input)
    print("Final result", result)

@click.command()
@click.option(
    "--user-query",
    "-q",
    required=False,
    help="The user query",
    default="StreamingEventsWorkflow",
)
def main(user_query: str):
    from llama_index.utils.workflow import draw_all_possible_flows
    draw_all_possible_flows( MyWorkflow, filename="graphs/GraphMyWorkflow.html")

    asyncio.run(run_workflow(user_query))

if __name__ == "__main__":
    asyncio.run(main())

"""
/////////////////////////////////////////////////////////////////////
                       
This file is AUTO-GENERATED. PLEASE DO NOT EDIT THIS FILE
                       
/////////////////////////////////////////////////////////////////////
"""
